/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAppendInstruction,
  type ParsedCloseEmptyTreeInstruction,
  type ParsedInitEmptyMerkleTreeInstruction,
  type ParsedInsertOrAppendInstruction,
  type ParsedReplaceLeafInstruction,
  type ParsedTransferAuthorityInstruction,
  type ParsedVerifyLeafInstruction,
} from '../instructions';

export const SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS =
  'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;

export enum SplAccountCompressionAccount {
  MerkleTree,
}

export enum SplAccountCompressionInstruction {
  InitEmptyMerkleTree,
  ReplaceLeaf,
  TransferAuthority,
  VerifyLeaf,
  Append,
  InsertOrAppend,
  CloseEmptyTree,
}

export function identifySplAccountCompressionInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SplAccountCompressionInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 11, 119, 7, 180, 107, 220, 110])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.InitEmptyMerkleTree;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 165, 76, 100, 73, 147, 0, 128])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.ReplaceLeaf;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 169, 76, 72, 229, 180, 55, 161])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.TransferAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 220, 22, 223, 104, 10, 250, 224])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.VerifyLeaf;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 120, 18, 222, 236, 225, 88, 203])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.Append;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([6, 42, 50, 190, 51, 109, 178, 168])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.InsertOrAppend;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 14, 219, 107, 78, 103, 16, 103])
      ),
      0
    )
  ) {
    return SplAccountCompressionInstruction.CloseEmptyTree;
  }
  throw new Error(
    'The provided instruction could not be identified as a splAccountCompression instruction.'
  );
}

export type ParsedSplAccountCompressionInstruction<
  TProgram extends string = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK',
> =
  | ({
      instructionType: SplAccountCompressionInstruction.InitEmptyMerkleTree;
    } & ParsedInitEmptyMerkleTreeInstruction<TProgram>)
  | ({
      instructionType: SplAccountCompressionInstruction.ReplaceLeaf;
    } & ParsedReplaceLeafInstruction<TProgram>)
  | ({
      instructionType: SplAccountCompressionInstruction.TransferAuthority;
    } & ParsedTransferAuthorityInstruction<TProgram>)
  | ({
      instructionType: SplAccountCompressionInstruction.VerifyLeaf;
    } & ParsedVerifyLeafInstruction<TProgram>)
  | ({
      instructionType: SplAccountCompressionInstruction.Append;
    } & ParsedAppendInstruction<TProgram>)
  | ({
      instructionType: SplAccountCompressionInstruction.InsertOrAppend;
    } & ParsedInsertOrAppendInstruction<TProgram>)
  | ({
      instructionType: SplAccountCompressionInstruction.CloseEmptyTree;
    } & ParsedCloseEmptyTreeInstruction<TProgram>);
