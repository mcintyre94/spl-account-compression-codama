/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedNoopInstructionInstruction } from '../instructions';

export const SPL_NOOP_PROGRAM_ADDRESS =
  'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;

export enum SplNoopInstruction {
  NoopInstruction,
}

export function identifySplNoopInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SplNoopInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([0])),
      0
    )
  ) {
    return SplNoopInstruction.NoopInstruction;
  }
  throw new Error(
    'The provided instruction could not be identified as a splNoop instruction.'
  );
}

export type ParsedSplNoopInstruction<
  TProgram extends string = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV',
> = {
  instructionType: SplNoopInstruction.NoopInstruction;
} & ParsedNoopInstructionInstruction<TProgram>;
