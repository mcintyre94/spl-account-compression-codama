/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type ConcurrentMerkleTreeHeaderData = {
  __kind: 'V1';
  /**
   * Buffer of changelogs stored on-chain.
   * Must be a power of 2; see above table for valid combinations.
   */
  maxBufferSize: number;
  /**
   * Depth of the SPL ConcurrentMerkleTree to store.
   * Tree capacity can be calculated as power(2, max_depth).
   * See above table for valid options.
   */
  maxDepth: number;
  /**
   * Authority that validates the content of the trees.
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: Address;
  /**
   * Slot corresponding to when the Merkle tree was created.
   * Provides a lower-bound on what slot to start (re-)building a tree from.
   */
  creationSlot: bigint;
  /**
   * Needs padding for the account to be 8-byte aligned
   * 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
   */
  padding: ReadonlyUint8Array;
};

export type ConcurrentMerkleTreeHeaderDataArgs = {
  __kind: 'V1';
  /**
   * Buffer of changelogs stored on-chain.
   * Must be a power of 2; see above table for valid combinations.
   */
  maxBufferSize: number;
  /**
   * Depth of the SPL ConcurrentMerkleTree to store.
   * Tree capacity can be calculated as power(2, max_depth).
   * See above table for valid options.
   */
  maxDepth: number;
  /**
   * Authority that validates the content of the trees.
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: Address;
  /**
   * Slot corresponding to when the Merkle tree was created.
   * Provides a lower-bound on what slot to start (re-)building a tree from.
   */
  creationSlot: number | bigint;
  /**
   * Needs padding for the account to be 8-byte aligned
   * 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
   */
  padding: ReadonlyUint8Array;
};

export function getConcurrentMerkleTreeHeaderDataEncoder(): FixedSizeEncoder<ConcurrentMerkleTreeHeaderDataArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        ['maxBufferSize', getU32Encoder()],
        ['maxDepth', getU32Encoder()],
        ['authority', getAddressEncoder()],
        ['creationSlot', getU64Encoder()],
        ['padding', fixEncoderSize(getBytesEncoder(), 6)],
      ]),
    ],
  ]) as FixedSizeEncoder<ConcurrentMerkleTreeHeaderDataArgs>;
}

export function getConcurrentMerkleTreeHeaderDataDecoder(): FixedSizeDecoder<ConcurrentMerkleTreeHeaderData> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['maxBufferSize', getU32Decoder()],
        ['maxDepth', getU32Decoder()],
        ['authority', getAddressDecoder()],
        ['creationSlot', getU64Decoder()],
        ['padding', fixDecoderSize(getBytesDecoder(), 6)],
      ]),
    ],
  ]) as FixedSizeDecoder<ConcurrentMerkleTreeHeaderData>;
}

export function getConcurrentMerkleTreeHeaderDataCodec(): FixedSizeCodec<
  ConcurrentMerkleTreeHeaderDataArgs,
  ConcurrentMerkleTreeHeaderData
> {
  return combineCodec(
    getConcurrentMerkleTreeHeaderDataEncoder(),
    getConcurrentMerkleTreeHeaderDataDecoder()
  );
}

// Data Enum Helpers.
export function concurrentMerkleTreeHeaderData(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<
    ConcurrentMerkleTreeHeaderDataArgs,
    '__kind',
    'V1'
  >
): GetDiscriminatedUnionVariant<
  ConcurrentMerkleTreeHeaderDataArgs,
  '__kind',
  'V1'
>;
export function concurrentMerkleTreeHeaderData<
  K extends ConcurrentMerkleTreeHeaderDataArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isConcurrentMerkleTreeHeaderData<
  K extends ConcurrentMerkleTreeHeaderData['__kind'],
>(
  kind: K,
  value: ConcurrentMerkleTreeHeaderData
): value is ConcurrentMerkleTreeHeaderData & { __kind: K } {
  return value.__kind === kind;
}
